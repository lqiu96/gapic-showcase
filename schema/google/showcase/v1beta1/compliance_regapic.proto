// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "google/api/client.proto";

package google.showcase.v1beta1;

option go_package = "github.com/googleapis/gapic-showcase/server/genproto";
option java_package = "com.google.showcase.v1beta1";
option java_multiple_files = true;
option ruby_package = "Google::Showcase::V1beta1";

// This service is used to test that GAPICs implement various REST-related features correctly. This mostly means transcoding proto3 requests to REST format
// correctly for various types of HTTP annotations, but it also includes verifying that unknown (numeric) enums received by clients can be round-tripped
// correctly.
service ComplianceRegapic {

  // This service is meant to only run locally on the port 7469 (keypad digits
  // for "show").
  option (google.api.default_host) = "localhost:7469";

  // This method echoes the ComplianceData request. This method exercises
  // sending the entire request object in the REST body.
  rpc RepeatDataBody(EnumRequestRegapic) returns (EnumResponseRegapic) {}

  // This method requests an enum value from the server. Depending on the contents of EnumRequest, the enum value returned will be a known enum declared in the
  // .proto file, or a made-up enum value the is unknown to the client. To verify that clients can round-trip unknown enum vaues they receive, use the
  // response from this RPC as the request to VerifyEnum()
  //
  // The values of enums sent by the server when a known or unknown value is requested will be the same within a single Showcase server run (this is needed for
  // VerifyEnum() to work) but are not guaranteed to be the same across separate Showcase server runs.
  rpc GetEnum(stream EnumRequestRegapic) returns (stream EnumResponseRegapic) {}

  // This method is used to verify that clients can round-trip enum values, which is particularly important for unknown enum values over REST. VerifyEnum()
  // verifies that its request, which is presumably the response that the client previously got to a GetEnum(), contains the correct data. If so, it responds
  // with the same EnumResponse; otherwise, the RPC errors.
  //
  // This works because the values of enums sent by the server when a known or unknown value is requested will be the same within a single Showcase server run,
  // although they are not guaranteed to be the same across separate Showcase server runs.
  rpc VerifyEnum(stream EnumResponseRegapic) returns (EnumResponseRegapic) {}

}

message EnumRequestRegapic {
  // Whether the client is requesting a new, unknown enum value or a known enum value already declard in this proto file.
  bool unknown_enum = 1;
}

message EnumResponseRegapic {
  // The original request for a known or unknown enum from the server.
  string request = 1;
}
